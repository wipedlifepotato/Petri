{
    "swagger": "2.0",
    "info": {
        "description": "API for user registration, authentication, wallet operations and admin management",
        "title": "mFrelance API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/",
    "paths": {
        "/admin/delete-user-tasks": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an admin to delete all tasks belonging to a user by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Delete all tasks of a specific user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success and deleted count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user_id",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Admin rights required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete tasks",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/admin/disputes/assign": {
            "post": {
                "description": "Assign a dispute to the current admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "disputes"
                ],
                "summary": "Assign dispute",
                "parameters": [
                    {
                        "description": "Dispute ID",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AssignDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/admin/IIsAdmin": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns true/false if current user has admin privileges",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Check if user is admin",
                "responses": {}
            }
        },
        "/api/admin/block": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Blocks a user by userID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Block user",
                "parameters": [
                    {
                        "description": "UserID payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user blocked",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/check": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns true/false if current user has admin privileges",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Check if user is admin",
                "responses": {}
            }
        },
        "/api/admin/disputes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a paginated list of all unresolved disputes requiring admin attention. Used for dispute management dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dispute-management"
                ],
                "summary": "Retrieve Open Disputes",
                "responses": {
                    "200": {
                        "description": "success: true, disputes: array of open dispute objects",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error retrieving disputes",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/getRandomTicket": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Set ticket to admin (random)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get random opened ticket (admin)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TicketDoc"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/make": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Elevates a regular user to administrator status. Requires existing admin privileges to execute.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "administration"
                ],
                "summary": "Grant Administrative Privileges",
                "parameters": [
                    {
                        "description": "User ID to promote to admin",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully granted admin rights",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON payload or user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required for this operation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error during privilege update",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes administrator status from a user, reverting them to regular user privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "administration"
                ],
                "summary": "Revoke Administrative Privileges",
                "parameters": [
                    {
                        "description": "User ID to demote from admin",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User admin privileges successfully revoked",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON payload or user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required for this operation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error during privilege update",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/transactions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows admin to view transactions by wallet or all transactions with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Admin: View transactions",
                "parameters": [
                    {
                        "description": "Request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminTransactionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id:int, from_wallet_id:int, to_wallet_id:int, to_address:string, task_id:int, amount:string, currency:string, confirmed:bool, created_at:string",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/unblock": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unblocks a user by userID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Unblock user",
                "parameters": [
                    {
                        "description": "UserID payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user unblocked",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/update_balance": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows admin to set a new balance for a wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update wallet balance",
                "parameters": [
                    {
                        "description": "Wallet balance payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminUpdateBalanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "balance updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/admin/wallets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all wallets for a given user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get user wallets",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Wallet"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/chats/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an admin to delete a chat room by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Delete chat room",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chat room ID",
                        "name": "chat_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad chat_id",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/disputes/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Opens a new dispute for a task (only client or accepted freelancer can open)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "disputes"
                ],
                "summary": "Create dispute",
                "parameters": [
                    {
                        "description": "Resolution payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResolveDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dispute created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request or dispute already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/disputes/details": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns dispute info, related task, escrow balance and messages",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "disputes"
                ],
                "summary": "Get dispute details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success flag and dispute details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid dispute ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Dispute, task or escrow not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get messages",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/disputes/get": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns details and messages for a specific dispute",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "disputes"
                ],
                "summary": "Get dispute details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dispute details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid dispute ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Dispute not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/disputes/message": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows client, freelancer or assigned admin to send a message in a dispute",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "disputes"
                ],
                "summary": "Send dispute message",
                "parameters": [
                    {
                        "description": "Dispute message",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SendDisputeMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Dispute not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to send message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/disputes/my": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all disputes where the user is a client or accepted freelancer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "disputes"
                ],
                "summary": "Get user disputes",
                "responses": {
                    "200": {
                        "description": "User disputes list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/disputes/resolve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an assigned admin to resolve a dispute and release funds from escrow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "disputes"
                ],
                "summary": "Resolve dispute",
                "parameters": [
                    {
                        "description": "Resolution payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResolveDisputeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success flag and message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or invalid resolution",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Dispute not assigned to you",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Dispute or task not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to resolve dispute",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/offers": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a freelancer to make an offer on an open task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offers"
                ],
                "summary": "Create a task offer",
                "parameters": [
                    {
                        "description": "Offer payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateTaskOfferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success flag and created offer",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create offer",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/offers/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a freelancer (or admin) to delete their own offer if not accepted",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offers"
                ],
                "summary": "Delete user's own task offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid offer ID or accepted offer cannot be deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (not owner or admin)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Offer not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete offer",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/offers/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a freelancer to update their own offer (not accepted yet)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "offers"
                ],
                "summary": "Update user's own task offer",
                "parameters": [
                    {
                        "description": "Offer data",
                        "name": "offer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TaskOffer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success and updated offer",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or accepted offer cannot be edited",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (not owner)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Offer not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update offer",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/reviews": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows clients or accepted freelancers to submit a review for a completed task. Each user can only review a task once.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Submit Task Review",
                "parameters": [
                    {
                        "description": "Review data including task ID, rating (1-5), and optional comment",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Review"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"success\\\": true, \\\"review\\\": {\\\"id\\\": 123, \\\"task_id\\\": 456, \\\"reviewer_id\\\": 78, \\\"reviewed_id\\\": 90, \\\"rating\\\": 5, \\\"comment\\\": \\\"Great work!\\\", \\\"created_at\\\": \\\"2023-12-01T10:00:00Z\\\"}}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Example: {\\\"error\\\": \\\"Task is not completed\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Example: {\\\"error\\\": \\\"Unauthorized\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Example: {\\\"error\\\": \\\"Forbidden\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Example: {\\\"error\\\": \\\"Task not found\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Example: {\\\"error\\\": \\\"Internal server error\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/reviews/rating": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Calculates and returns the average rating received by a user across all their completed tasks. Used for reputation scoring.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get User Average Rating",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user to get average rating for",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"success\\\": true, \\\"rating\\\": 4.5}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Example: {\\\"error\\\": \\\"Invalid user ID\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Example: {\\\"error\\\": \\\"Database error\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/reviews/task": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all reviews submitted for a specific task. Used to display feedback on task completion pages.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get Reviews for Task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the task to get reviews for",
                        "name": "task_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"success\\\": true, \\\"reviews\\\": [{\\\"id\\\": 123, \\\"reviewer_id\\\": 78, \\\"rating\\\": 5, \\\"comment\\\": \\\"Great job!\\\", \\\"created_at\\\": \\\"2023-12-01T10:00:00Z\\\"}]}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Example: {\\\"error\\\": \\\"Invalid task ID\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Example: {\\\"error\\\": \\\"Database error\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/reviews/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all reviews received by a specific user (reviews about them). Used to display user reputation and feedback history.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get Reviews for User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user to get reviews for",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"success\\\": true, \\\"reviews\\\": [{\\\"id\\\": 123, \\\"task_id\\\": 456, \\\"reviewer_id\\\": 78, \\\"rating\\\": 5, \\\"comment\\\": \\\"Excellent work!\\\", \\\"created_at\\\": \\\"2023-12-01T10:00:00Z\\\"}]}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Example: {\\\"error\\\": \\\"Invalid user ID\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Example: {\\\"error\\\": \\\"Database error\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/tasks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns list of tasks. Use query param `status=open` to get only open tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter tasks by status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success flag and tasks list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get tasks",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows the task owner to update a task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Update a task",
                "parameters": [
                    {
                        "description": "Updated task payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success flag and updated task",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update task",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a user to create a new task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create a new task",
                "parameters": [
                    {
                        "description": "Task payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success flag and created task",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create task",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows the task owner to delete a task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Delete a task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success flag",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid task ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete task",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/tasks/detail": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns details of a single task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get task details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success flag and task",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid task ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/ticket/createTicket": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Create new ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Create new ticket",
                "parameters": [
                    {
                        "description": "Ticket info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TicketCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.TicketCreateAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/ticket/exit": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Removes the user from the ticket's participants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Exit from a ticket",
                "parameters": [
                    {
                        "description": "Ticket ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TicketIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "status: ok",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload or ticket_id",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/ticket/messages": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Returns messages for a given ticket if the user has access, supports limit/offset",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Get messages for a ticket",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "ticket_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of messages to return (max 1000, default 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for messages (default last messages)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TicketMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "User does not have access",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/ticket/my": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get all tickets of user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Get own tickets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TicketDoc"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/ticket/write": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Add message to ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ticket"
                ],
                "summary": "Write to ticket",
                "parameters": [
                    {
                        "description": "Message info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.WriteTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns user’s balances in BTC and XMR",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get wallet balances",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.WalletBalance"
                        }
                    }
                }
            }
        },
        "/api/wallet/bitcoinSend": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends Bitcoin transaction using Electrum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Send Bitcoin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Destination address",
                        "name": "to",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Amount",
                        "name": "amount",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/wallet/moneroSend": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends Monero transaction (not implemented)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Send Monero",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth": {
            "post": {
                "description": "Authenticates user credentials and returns a JWT token for API access. Requires CAPTCHA verification for security.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User Authentication",
                "parameters": [
                    {
                        "description": "User login credentials including username, password, and CAPTCHA",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"message\\\": \\\"Authenticated successfully\\\", \\\"token\\\": \\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\\\"}",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Example: {\\\"error\\\": \\\"invalid captcha\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Example: {\\\"error\\\": \\\"invalid username or password\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/captcha": {
            "get": {
                "description": "Generates a new CAPTCHA image with 4-digit code for user verification. Includes rate limiting per IP to prevent abuse.",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Generate CAPTCHA Challenge",
                "responses": {
                    "200": {
                        "description": "image/png\" \"CAPTCHA image in PNG format",
                        "headers": {
                            "X-Captcha-ID": {
                                "type": "string",
                                "description": "Unique identifier for the CAPTCHA challenge"
                            }
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded - too many CAPTCHA requests",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "503": {
                        "description": "CAPTCHA is disabled in server configuration",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/captcha/status": {
            "get": {
                "description": "Returns whether CAPTCHA verification is currently enabled on the server. Used by frontend to conditionally show CAPTCHA fields.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Get CAPTCHA Configuration Status",
                "responses": {
                    "200": {
                        "description": "Example: {\\\"enabled\\\": true}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "/chat/UpdateChatRequest": {
            "post": {
                "description": "Accept or reject a chat request by the requested user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Update a chat request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user who sent the chat request",
                        "name": "requester_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New status: accepted or rejected",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns status ok",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid requester_id or status",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized — user not logged in or not allowed to update",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/acceptChatRequest": {
            "post": {
                "description": "Accepts a chat request from another user and creates a chat room",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Accept chat request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user who sent the request",
                        "name": "requester_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns accepted status and chatRoomID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid requester_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized — user not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/cancelChatRequest": {
            "post": {
                "description": "Cancels a previously sent chat request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Cancel chat request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user to whom the request was sent",
                        "name": "requester_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request cancelled successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid requester_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized — user not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/createChatRequest": {
            "post": {
                "description": "Create a new chat request from the logged-in user to another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Create a chat request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user you want to start a chat with",
                        "name": "requested_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the created chat request",
                        "schema": {
                            "$ref": "#/definitions/models.ChatRequest"
                        }
                    },
                    "400": {
                        "description": "invalid requested_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized — user not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/exitFromChat": {
            "post": {
                "description": "Removes the logged-in user from a chat room",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Exit chat room",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the chat room",
                        "name": "chat_room_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns status ok",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid chat_room_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized — user not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/getChatMessages": {
            "get": {
                "description": "Returns all messages for a given chat room if the user has access",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Get chat messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the chat room",
                        "name": "chat_room_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ChatMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid chat_room_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized — user not logged in or no access",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/getChatRequests": {
            "get": {
                "description": "Returns all incoming chat requests for the logged-in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Get chat requests",
                "responses": {
                    "200": {
                        "description": "List of chat requests",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ChatRequest"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized — user not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/getChatRoomsForUser": {
            "get": {
                "description": "Returns all chat rooms the logged-in user participates in",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Get chat rooms",
                "responses": {
                    "200": {
                        "description": "List of chat rooms",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ChatRoom"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized — user not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat/sendMessage": {
            "post": {
                "description": "Sends a message to a chat room for the logged-in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Send message",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the chat room",
                        "name": "chat_room_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Message object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChatMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the created message",
                        "schema": {
                            "$ref": "#/definitions/models.ChatMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid chat_room_id or request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized — user not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/hello": {
            "get": {
                "description": "Provides a simple health check response to verify API availability",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Health Check Endpoint",
                "responses": {
                    "200": {
                        "description": "Returns a greeting message confirming API is operational",
                        "schema": {
                            "$ref": "#/definitions/handlers.Response"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user profile (GET) or update profile (POST)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get or update profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Profile"
                        }
                    },
                    "400": {
                        "description": "invalid payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user profile (GET) or update profile (POST)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get or update profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Profile"
                        }
                    },
                    "400": {
                        "description": "invalid payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/by_id": {
            "get": {
                "description": "Returns sanitized profile and username by user_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get public profile by user_id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Profile"
                        }
                    },
                    "400": {
                        "description": "invalid user_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns paginated list of profiles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "List profiles",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Profile"
                            }
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creates a new user account with username, password, and CAPTCHA verification. Generates a recovery mnemonic phrase for account restoration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register New User Account",
                "parameters": [
                    {
                        "description": "Registration credentials including username, password, and CAPTCHA",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example: {\\\"message\\\": \\\"Account created successfully. Save your recovery phrase!\\\", \\\"encrypted\\\": \\\"word1 word2 word3...\\\"}",
                        "schema": {
                            "$ref": "#/definitions/handlers.Response"
                        }
                    },
                    "400": {
                        "description": "Example: {\\\"error\\\": \\\"invalid captcha\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Example: {\\\"error\\\": \\\"failed to create user, maybe user exists\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/restoreuser": {
            "post": {
                "description": "Restores access to a user account using the recovery mnemonic phrase and sets a new password. Requires CAPTCHA verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Restore User Account",
                "parameters": [
                    {
                        "description": "Account restoration data including username, mnemonic, new password, and CAPTCHA",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RestoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account restored successfully with new JWT token",
                        "schema": {
                            "$ref": "#/definitions/handlers.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input, CAPTCHA failure, or invalid mnemonic",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error during account restoration",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/verify": {
            "get": {
                "description": "Verifies the user's answer against the stored CAPTCHA challenge. Consumes the CAPTCHA token upon successful verification.",
                "tags": [
                    "authentication"
                ],
                "summary": "Validate CAPTCHA Response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CAPTCHA identifier received from /captcha endpoint",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User's answer to the CAPTCHA challenge",
                        "name": "answer",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok: true if verification successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "CAPTCHA expired or invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "db.WalletBalance": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "balance": {
                    "type": "number"
                }
            }
        },
        "handlers.AdminRequest": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.AdminTransactionsRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "wallet_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.AdminUpdateBalanceRequest": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.AssignDisputeRequest": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.AuthRequest": {
            "type": "object",
            "properties": {
                "captcha_answer": {
                    "type": "string"
                },
                "captcha_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.AuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateTaskOfferRequest": {
            "type": "object",
            "properties": {
                "price": {
                    "type": "number"
                },
                "task_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.CreateTaskRequest": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "deadline": {
                    "description": "ISO8601",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "properties": {
                "captcha_answer": {
                    "type": "string"
                },
                "captcha_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.ResolveDisputeRequest": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "integer"
                },
                "resolution": {
                    "description": "\"client_won\" или \"freelancer_won\"",
                    "type": "string"
                }
            }
        },
        "handlers.Response": {
            "type": "object",
            "properties": {
                "encrypted": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.RestoreRequest": {
            "type": "object",
            "properties": {
                "captcha_answer": {
                    "type": "string"
                },
                "captcha_id": {
                    "type": "string"
                },
                "mnemonic": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.SendDisputeMessageRequest": {
            "type": "object",
            "properties": {
                "dispute_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.TicketCreateAnswer": {
            "type": "object",
            "properties": {
                "ticket_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.TicketCreateRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "handlers.TicketIDRequest": {
            "type": "object",
            "properties": {
                "ticket_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.UpdateTaskRequest": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.WriteTicketRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "ticket_id": {
                    "type": "integer"
                }
            }
        },
        "models.ChatMessage": {
            "type": "object",
            "properties": {
                "chat_room_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "sender_id": {
                    "type": "integer"
                }
            }
        },
        "models.ChatRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "requested_id": {
                    "type": "integer"
                },
                "requester_id": {
                    "type": "integer"
                },
                "status": {
                    "description": "pending, accepted, rejected",
                    "type": "string"
                }
            }
        },
        "models.ChatRoom": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.Profile": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "completed_tasks": {
                    "type": "integer"
                },
                "full_name": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.Review": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "reviewed_id": {
                    "type": "integer"
                },
                "reviewer_id": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "integer"
                }
            }
        },
        "models.TaskOffer": {
            "type": "object",
            "properties": {
                "accepted": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "freelancer_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "task_id": {
                    "type": "integer"
                }
            }
        },
        "models.TicketDoc": {
            "type": "object",
            "properties": {
                "additional_users_have_access": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "admin_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.TicketMessage": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "read": {
                    "type": "boolean"
                },
                "senderID": {
                    "type": "integer"
                },
                "ticketID": {
                    "type": "integer"
                }
            }
        },
        "models.Wallet": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "balance": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "userID": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}