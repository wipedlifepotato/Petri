basePath: /
definitions:
  db.WalletBalance:
    properties:
      address:
        type: string
      balance:
        type: number
    type: object
  handlers.AdminRequest:
    properties:
      user_id:
        type: integer
    type: object
  handlers.AdminTransactionsRequest:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      wallet_id:
        type: integer
    type: object
  handlers.AdminUpdateBalanceRequest:
    properties:
      balance:
        type: string
      user_id:
        type: integer
    type: object
  handlers.AuthRequest:
    properties:
      captcha_answer:
        type: string
      captcha_id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.AuthResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      captcha_answer:
        type: string
      captcha_id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.Response:
    properties:
      encrypted:
        type: string
      message:
        type: string
    type: object
  handlers.RestoreRequest:
    properties:
      captcha_answer:
        type: string
      captcha_id:
        type: string
      mnemonic:
        type: string
      new_password:
        type: string
      username:
        type: string
    type: object
  handlers.TicketCreateAnswer:
    properties:
      ticket_id:
        type: integer
    type: object
  handlers.TicketCreateRequest:
    properties:
      message:
        type: string
      subject:
        type: string
    type: object
  handlers.TicketIDRequest:
    properties:
      ticket_id:
        type: integer
    type: object
  handlers.WriteTicketRequest:
    properties:
      message:
        type: string
      ticket_id:
        type: integer
    type: object
  models.ChatMessage:
    properties:
      chat_room_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      sender_id:
        type: integer
    type: object
  models.ChatRequest:
    properties:
      created_at:
        type: string
      id:
        type: integer
      requested_id:
        type: integer
      requester_id:
        type: integer
      status:
        description: pending, accepted, rejected
        type: string
    type: object
  models.ChatRoom:
    properties:
      created_at:
        type: string
      id:
        type: integer
    type: object
  models.Profile:
    properties:
      avatar:
        type: string
      bio:
        type: string
      completed_tasks:
        type: integer
      full_name:
        type: string
      rating:
        type: number
      skills:
        items:
          type: string
        type: array
      user_id:
        type: integer
    type: object
  models.TicketDoc:
    properties:
      additional_users_have_access:
        items:
          type: integer
        type: array
      admin_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      status:
        type: string
      subject:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.TicketMessage:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      message:
        type: string
      read:
        type: boolean
      senderID:
        type: integer
      ticketID:
        type: integer
    type: object
  models.Wallet:
    properties:
      address:
        type: string
      balance:
        type: string
      currency:
        type: string
      id:
        type: integer
      userID:
        type: integer
    type: object
info:
  contact: {}
  description: API for user registration, authentication, wallet operations and admin
    management
  title: mFrelance API
  version: "1.0"
paths:
  /api/admin/block:
    post:
      consumes:
      - application/json
      description: Blocks a user by userID
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user blocked
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Block user
      tags:
      - admin
  /api/admin/check:
    get:
      description: Returns true/false if current user has admin privileges
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Check if user is admin
      tags:
      - admin
  /api/admin/getRandomTicket:
    get:
      description: Set ticket to admin (random)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketDoc'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Get random opened ticket (admin)
      tags:
      - admin
  /api/admin/make:
    post:
      consumes:
      - application/json
      description: Makes a user admin by userID
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user is now admin
          schema:
            type: string
        "400":
          description: invalid request body
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "403":
          description: admin rights required
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Grant admin rights
      tags:
      - admin
  /api/admin/remove:
    post:
      consumes:
      - application/json
      description: Removes admin status from a user
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user admin removed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Revoke admin rights
      tags:
      - admin
  /api/admin/transactions:
    post:
      consumes:
      - application/json
      description: Allows admin to view transactions by wallet or all transactions
        with pagination
      parameters:
      - description: Request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminTransactionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: id:int, from_wallet_id:int, to_wallet_id:int, to_address:string,
            task_id:int, amount:string, currency:string, confirmed:bool, created_at:string
          schema:
            items:
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 'Admin: View transactions'
      tags:
      - admin
  /api/admin/unblock:
    post:
      consumes:
      - application/json
      description: Unblocks a user by userID
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user unblocked
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Unblock user
      tags:
      - admin
  /api/admin/update_balance:
    post:
      consumes:
      - application/json
      description: Allows admin to set a new balance for a wallet
      parameters:
      - description: Wallet balance payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminUpdateBalanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: balance updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update wallet balance
      tags:
      - admin
  /api/admin/wallets:
    get:
      consumes:
      - application/json
      description: Returns all wallets for a given user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Wallet'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user wallets
      tags:
      - admin
  /api/ticket/createTicket:
    post:
      consumes:
      - application/json
      description: Create new ticket
      parameters:
      - description: Ticket info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.TicketCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TicketCreateAnswer'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Create new ticket
      tags:
      - ticket
  /api/ticket/exit:
    post:
      consumes:
      - application/json
      description: Removes the user from the ticket's participants
      parameters:
      - description: Ticket ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.TicketIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'status: ok'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid payload or ticket_id
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Exit from a ticket
      tags:
      - ticket
  /api/ticket/messages:
    get:
      description: Returns all messages for a given ticket if the user has access
      parameters:
      - description: Ticket ID
        in: query
        name: ticket_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            items:
              $ref: '#/definitions/models.TicketMessage'
            type: array
        "400":
          description: Invalid ticket_id
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: User does not have access
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Get messages for a ticket
      tags:
      - ticket
  /api/ticket/my:
    get:
      description: Get all tickets of user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketDoc'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Get own tickets
      tags:
      - ticket
  /api/ticket/write:
    post:
      consumes:
      - application/json
      description: Add message to ticket
      parameters:
      - description: Message info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.WriteTicketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Write to ticket
      tags:
      - ticket
  /api/wallet:
    get:
      description: Returns user’s balances in BTC and XMR
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.WalletBalance'
      security:
      - BearerAuth: []
      summary: Get wallet balances
      tags:
      - wallet
  /api/wallet/bitcoinSend:
    post:
      consumes:
      - application/json
      description: Sends Bitcoin transaction using Electrum
      parameters:
      - description: Destination address
        in: query
        name: to
        required: true
        type: string
      - description: Amount
        in: query
        name: amount
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send Bitcoin
      tags:
      - wallet
  /api/wallet/moneroSend:
    post:
      consumes:
      - application/json
      description: Sends Monero transaction (not implemented)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send Monero
      tags:
      - wallet
  /auth:
    post:
      consumes:
      - application/json
      description: Logs in user and returns JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate user
      tags:
      - auth
  /captcha:
    get:
      description: Returns a captcha image and X-Captcha-ID header
      produces:
      - image/png
      responses:
        "200":
          description: image/png
          headers:
            X-Captcha-ID:
              description: Captcha ID
              type: string
      summary: Get captcha image
      tags:
      - auth
  /chat/UpdateChatRequest:
    post:
      consumes:
      - application/json
      description: Accept or reject a chat request by the requested user
      parameters:
      - description: ID of the user who sent the chat request
        in: query
        name: requester_id
        required: true
        type: integer
      - description: 'New status: accepted or rejected'
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns status ok
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid requester_id or status
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in or not allowed to update
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Update a chat request
      tags:
      - Chat
  /chat/acceptChatRequest:
    post:
      consumes:
      - application/json
      description: Accepts a chat request from another user and creates a chat room
      parameters:
      - description: ID of the user who sent the request
        in: query
        name: requester_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns accepted status and chatRoomID
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid requester_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Accept chat request
      tags:
      - Chat
  /chat/cancelChatRequest:
    post:
      consumes:
      - application/json
      description: Cancels a previously sent chat request
      parameters:
      - description: ID of the user to whom the request was sent
        in: query
        name: requester_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Request cancelled successfully
          schema:
            type: string
        "400":
          description: Invalid requester_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Cancel chat request
      tags:
      - Chat
  /chat/createChatRequest:
    post:
      consumes:
      - application/json
      description: Create a new chat request from the logged-in user to another user
      parameters:
      - description: ID of the user you want to start a chat with
        in: query
        name: requested_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Returns the created chat request
          schema:
            $ref: '#/definitions/models.ChatRequest'
        "400":
          description: invalid requested_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: db error
          schema:
            type: string
      summary: Create a chat request
      tags:
      - Chat
  /chat/exitFromChat:
    post:
      consumes:
      - application/json
      description: Removes the logged-in user from a chat room
      parameters:
      - description: ID of the chat room
        in: query
        name: chat_room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns status ok
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid chat_room_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Exit chat room
      tags:
      - Chat
  /chat/getChatMessages:
    get:
      consumes:
      - application/json
      description: Returns all messages for a given chat room if the user has access
      parameters:
      - description: ID of the chat room
        in: query
        name: chat_room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            items:
              $ref: '#/definitions/models.ChatMessage'
            type: array
        "400":
          description: Invalid chat_room_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in or no access
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Get chat messages
      tags:
      - Chat
  /chat/getChatRequests:
    get:
      consumes:
      - application/json
      description: Returns all incoming chat requests for the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: List of chat requests
          schema:
            items:
              $ref: '#/definitions/models.ChatRequest'
            type: array
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Get chat requests
      tags:
      - Chat
  /chat/getChatRoomsForUser:
    get:
      consumes:
      - application/json
      description: Returns all chat rooms the logged-in user participates in
      produces:
      - application/json
      responses:
        "200":
          description: List of chat rooms
          schema:
            items:
              $ref: '#/definitions/models.ChatRoom'
            type: array
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Get chat rooms
      tags:
      - Chat
  /chat/sendMessage:
    post:
      consumes:
      - application/json
      description: Sends a message to a chat room for the logged-in user
      parameters:
      - description: ID of the chat room
        in: query
        name: chat_room_id
        required: true
        type: integer
      - description: Message object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.ChatMessage'
      produces:
      - application/json
      responses:
        "201":
          description: Returns the created message
          schema:
            $ref: '#/definitions/models.ChatMessage'
        "400":
          description: Invalid chat_room_id or request body
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Send message
      tags:
      - Chat
  /hello:
    get:
      description: Simple hello endpoint
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Health/hello
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Get current user profile (GET) or update profile (POST)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: invalid payload
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "500":
          description: db error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get or update profile
      tags:
      - profile
    post:
      consumes:
      - application/json
      description: Get current user profile (GET) or update profile (POST)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: invalid payload
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "500":
          description: db error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get or update profile
      tags:
      - profile
  /profile/by_id:
    get:
      description: Returns sanitized profile and username by user_id
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: invalid user_id
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
      summary: Get public profile by user_id
      tags:
      - profile
  /profiles:
    get:
      description: Returns paginated list of profiles
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Profile'
            type: array
        "500":
          description: db error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List profiles
      tags:
      - profile
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user with login, password and captcha
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register new user
      tags:
      - auth
  /restoreuser:
    post:
      consumes:
      - application/json
      description: Restore account by mnemonic and set new password
      parameters:
      - description: Restore payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RestoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Restore user account
      tags:
      - auth
  /verify:
    get:
      description: Verifies provided captcha answer
      parameters:
      - description: Captcha ID
        in: query
        name: id
        required: true
        type: string
      - description: Captcha answer
        in: query
        name: answer
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify captcha
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
