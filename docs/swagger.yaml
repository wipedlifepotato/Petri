basePath: /
definitions:
  db.WalletBalance:
    properties:
      address:
        type: string
      balance:
        type: number
    type: object
  models.Profile:
    properties:
      avatar:
        type: string
      bio:
        type: string
      completed_tasks:
        type: integer
      full_name:
        type: string
      rating:
        type: number
      skills:
        items:
          type: string
        type: array
      user_id:
        type: integer
    type: object
  models.TicketDoc:
    properties:
      additional_users_have_access:
        items:
          type: integer
        type: array
      admin_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      status:
        type: string
      subject:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.TicketMessage:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      message:
        type: string
      read:
        type: boolean
      senderID:
        type: integer
      ticketID:
        type: integer
    type: object
  models.Wallet:
    properties:
      address:
        type: string
      balance:
        type: string
      currency:
        type: string
      id:
        type: integer
      userID:
        type: integer
    type: object
  server.AdminRequest:
    properties:
      user_id:
        type: integer
    type: object
  server.AdminTransactionsRequest:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      wallet_id:
        type: integer
    type: object
  server.AdminUpdateBalanceRequest:
    properties:
      balance:
        type: string
      user_id:
        type: integer
    type: object
  server.AuthRequest:
    properties:
      captcha_answer:
        type: string
      captcha_id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  server.RegisterRequest:
    properties:
      captcha_answer:
        type: string
      captcha_id:
        description: GPGKey        string `json:"gpg_key"`
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  server.TicketCreateAnswer:
    properties:
      ticket_id:
        type: integer
    type: object
  server.TicketCreateRequest:
    properties:
      message:
        type: string
      subject:
        type: string
    type: object
  server.TicketIDRequest:
    properties:
      ticket_id:
        type: integer
    type: object
  server.WriteTicketRequest:
    properties:
      message:
        type: string
      ticket_id:
        type: integer
    type: object
info:
  contact: {}
  description: API for user registration, authentication, wallet operations and admin
    management
  title: mFrelance API
  version: "1.0"
paths:
  /api/admin/block:
    post:
      consumes:
      - application/json
      description: Blocks a user by userID
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user blocked
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Block user
      tags:
      - admin
  /api/admin/check:
    get:
      description: Returns true/false if current user has admin privileges
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Check if user is admin
      tags:
      - admin
  /api/admin/getRandomTicket:
    get:
      description: Set ticket to admin (random)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketDoc'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Get random opened ticket (admin)
      tags:
      - admin
  /api/admin/make:
    post:
      consumes:
      - application/json
      description: Makes a user admin by userID
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user is now admin
          schema:
            type: string
        "400":
          description: invalid request body
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "403":
          description: admin rights required
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Grant admin rights
      tags:
      - admin
  /api/admin/remove:
    post:
      consumes:
      - application/json
      description: Removes admin status from a user
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user admin removed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Revoke admin rights
      tags:
      - admin
  /api/admin/transactions:
    post:
      consumes:
      - application/json
      description: Allows admin to view transactions by wallet or all transactions
        with pagination
      parameters:
      - description: Request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.AdminTransactionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: id:int, from_wallet_id:int, to_wallet_id:int, to_address:string,
            task_id:int, amount:string, currency:string, confirmed:bool, created_at:string
          schema:
            items:
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 'Admin: View transactions'
      tags:
      - admin
  /api/admin/unblock:
    post:
      consumes:
      - application/json
      description: Unblocks a user by userID
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user unblocked
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Unblock user
      tags:
      - admin
  /api/admin/update_balance:
    post:
      consumes:
      - application/json
      description: Allows admin to set a new balance for a wallet
      parameters:
      - description: Wallet balance payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.AdminUpdateBalanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: balance updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update wallet balance
      tags:
      - admin
  /api/admin/wallets:
    get:
      consumes:
      - application/json
      description: Returns all wallets for a given user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Wallet'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user wallets
      tags:
      - admin
  /api/ticket/createTicket:
    post:
      consumes:
      - application/json
      description: Create new ticket
      parameters:
      - description: Ticket info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.TicketCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.TicketCreateAnswer'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Create new ticket
      tags:
      - ticket
  /api/ticket/exit:
    post:
      consumes:
      - application/json
      description: Removes the user from the ticket's participants
      parameters:
      - description: Ticket ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.TicketIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'status: ok'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid payload or ticket_id
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Exit from a ticket
      tags:
      - ticket
  /api/ticket/messages:
    get:
      description: Returns all messages for a given ticket if the user has access
      parameters:
      - description: Ticket ID
        in: query
        name: ticket_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            items:
              $ref: '#/definitions/models.TicketMessage'
            type: array
        "400":
          description: Invalid ticket_id
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: User does not have access
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Get messages for a ticket
      tags:
      - ticket
  /api/ticket/my:
    get:
      description: Get all tickets of user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketDoc'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Get own tickets
      tags:
      - ticket
  /api/ticket/write:
    post:
      consumes:
      - application/json
      description: Add message to ticket
      parameters:
      - description: Message info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.WriteTicketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Write to ticket
      tags:
      - ticket
  /api/wallet:
    get:
      description: Returns user’s balances in BTC and XMR
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.WalletBalance'
      security:
      - BearerAuth: []
      summary: Get wallet balances
      tags:
      - wallet
  /api/wallet/bitcoinSend:
    post:
      consumes:
      - application/json
      description: Sends Bitcoin transaction using Electrum
      parameters:
      - description: Destination address
        in: query
        name: to
        required: true
        type: string
      - description: Amount
        in: query
        name: amount
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send Bitcoin
      tags:
      - wallet
  /api/wallet/moneroSend:
    post:
      consumes:
      - application/json
      description: Sends Monero transaction (not implemented)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send Monero
      tags:
      - wallet
  /auth:
    post:
      consumes:
      - application/json
      description: Logs in user and returns JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate user
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Get current user profile (GET) or update profile (POST)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: invalid payload
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "500":
          description: db error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get or update profile
      tags:
      - profile
    post:
      consumes:
      - application/json
      description: Get current user profile (GET) or update profile (POST)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: invalid payload
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "500":
          description: db error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get or update profile
      tags:
      - profile
  /profiles:
    get:
      description: Returns paginated list of profiles
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Profile'
            type: array
        "500":
          description: db error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List profiles
      tags:
      - profile
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user with login, password and captcha
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
