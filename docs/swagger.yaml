basePath: /
definitions:
  db.WalletBalance:
    properties:
      address:
        type: string
      balance:
        type: number
    type: object
  handlers.AdminRequest:
    properties:
      user_id:
        type: integer
    type: object
  handlers.AdminTransactionsRequest:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      wallet_id:
        type: integer
    type: object
  handlers.AdminUpdateBalanceRequest:
    properties:
      balance:
        type: string
      user_id:
        type: integer
    type: object
  handlers.AssignDisputeRequest:
    properties:
      dispute_id:
        type: integer
    type: object
  handlers.AuthRequest:
    properties:
      captcha_answer:
        type: string
      captcha_id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.AuthResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  handlers.CreateTaskOfferRequest:
    properties:
      price:
        type: number
      task_id:
        type: integer
    type: object
  handlers.CreateTaskRequest:
    properties:
      currency:
        type: string
      deadline:
        description: ISO8601
        type: string
      description:
        type: string
      price:
        type: number
      title:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      captcha_answer:
        type: string
      captcha_id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.ResolveDisputeRequest:
    properties:
      dispute_id:
        type: integer
      resolution:
        description: '"client_won" или "freelancer_won"'
        type: string
    type: object
  handlers.Response:
    properties:
      encrypted:
        type: string
      message:
        type: string
    type: object
  handlers.RestoreRequest:
    properties:
      captcha_answer:
        type: string
      captcha_id:
        type: string
      mnemonic:
        type: string
      new_password:
        type: string
      username:
        type: string
    type: object
  handlers.SendDisputeMessageRequest:
    properties:
      dispute_id:
        type: integer
      message:
        type: string
    type: object
  handlers.TicketCreateAnswer:
    properties:
      ticket_id:
        type: integer
    type: object
  handlers.TicketCreateRequest:
    properties:
      message:
        type: string
      subject:
        type: string
    type: object
  handlers.TicketIDRequest:
    properties:
      ticket_id:
        type: integer
    type: object
  handlers.UpdateTaskRequest:
    properties:
      currency:
        type: string
      deadline:
        type: string
      description:
        type: string
      id:
        type: integer
      price:
        type: number
      title:
        type: string
    type: object
  handlers.WriteTicketRequest:
    properties:
      message:
        type: string
      ticket_id:
        type: integer
    type: object
  models.ChatMessage:
    properties:
      chat_room_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      sender_id:
        type: integer
    type: object
  models.ChatRequest:
    properties:
      created_at:
        type: string
      id:
        type: integer
      requested_id:
        type: integer
      requester_id:
        type: integer
      status:
        description: pending, accepted, rejected
        type: string
    type: object
  models.ChatRoom:
    properties:
      created_at:
        type: string
      id:
        type: integer
    type: object
  models.Profile:
    properties:
      avatar:
        type: string
      bio:
        type: string
      completed_tasks:
        type: integer
      full_name:
        type: string
      rating:
        type: number
      skills:
        items:
          type: string
        type: array
      user_id:
        type: integer
    type: object
  models.Review:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      rating:
        type: integer
      reviewed_id:
        type: integer
      reviewer_id:
        type: integer
      task_id:
        type: integer
    type: object
  models.TaskOffer:
    properties:
      accepted:
        type: boolean
      created_at:
        type: string
      freelancer_id:
        type: integer
      id:
        type: integer
      message:
        type: string
      price:
        type: number
      task_id:
        type: integer
    type: object
  models.TicketDoc:
    properties:
      additional_users_have_access:
        items:
          type: integer
        type: array
      admin_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      status:
        type: string
      subject:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.TicketMessage:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      message:
        type: string
      read:
        type: boolean
      senderID:
        type: integer
      ticketID:
        type: integer
    type: object
  models.Wallet:
    properties:
      address:
        type: string
      balance:
        type: string
      currency:
        type: string
      id:
        type: integer
      userID:
        type: integer
    type: object
info:
  contact: {}
  description: API for user registration, authentication, wallet operations and admin
    management
  title: mFrelance API
  version: "1.0"
paths:
  /admin/delete-user-tasks:
    post:
      description: Allows an admin to delete all tasks belonging to a user by their
        ID
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success and deleted count
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user_id
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Admin rights required
          schema:
            additionalProperties:
              type: string
            type: object
        "405":
          description: Method not allowed
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete tasks
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete all tasks of a specific user
      tags:
      - admin
  /admin/disputes/assign:
    post:
      consumes:
      - application/json
      description: Assign a dispute to the current admin
      parameters:
      - description: Dispute ID
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignDisputeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Assign dispute
      tags:
      - disputes
  /api/admin/IIsAdmin:
    get:
      description: Returns true/false if current user has admin privileges
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Check if user is admin
      tags:
      - admin
  /api/admin/block:
    post:
      consumes:
      - application/json
      description: Blocks a user by userID
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user blocked
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Block user
      tags:
      - admin
  /api/admin/check:
    get:
      description: Returns true/false if current user has admin privileges
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Check if user is admin
      tags:
      - admin
  /api/admin/disputes:
    get:
      description: Returns a paginated list of all unresolved disputes requiring admin
        attention. Used for dispute management dashboard.
      produces:
      - application/json
      responses:
        "200":
          description: 'success: true, disputes: array of open dispute objects'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            type: string
        "403":
          description: Admin privileges required
          schema:
            type: string
        "500":
          description: Database error retrieving disputes
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Retrieve Open Disputes
      tags:
      - dispute-management
  /api/admin/getRandomTicket:
    get:
      description: Set ticket to admin (random)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketDoc'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Get random opened ticket (admin)
      tags:
      - admin
  /api/admin/make:
    post:
      consumes:
      - application/json
      description: Elevates a regular user to administrator status. Requires existing
        admin privileges to execute.
      parameters:
      - description: User ID to promote to admin
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully granted admin rights
          schema:
            type: string
        "400":
          description: Invalid JSON payload or user ID
          schema:
            type: string
        "401":
          description: Authentication required
          schema:
            type: string
        "403":
          description: Admin privileges required for this operation
          schema:
            type: string
        "500":
          description: Database error during privilege update
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Grant Administrative Privileges
      tags:
      - administration
  /api/admin/remove:
    post:
      consumes:
      - application/json
      description: Removes administrator status from a user, reverting them to regular
        user privileges.
      parameters:
      - description: User ID to demote from admin
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User admin privileges successfully revoked
          schema:
            type: string
        "400":
          description: Invalid JSON payload or user ID
          schema:
            type: string
        "401":
          description: Authentication required
          schema:
            type: string
        "403":
          description: Admin privileges required for this operation
          schema:
            type: string
        "500":
          description: Database error during privilege update
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Revoke Administrative Privileges
      tags:
      - administration
  /api/admin/transactions:
    post:
      consumes:
      - application/json
      description: Allows admin to view transactions by wallet or all transactions
        with pagination
      parameters:
      - description: Request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminTransactionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: id:int, from_wallet_id:int, to_wallet_id:int, to_address:string,
            task_id:int, amount:string, currency:string, confirmed:bool, created_at:string
          schema:
            items:
              type: object
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: 'Admin: View transactions'
      tags:
      - admin
  /api/admin/unblock:
    post:
      consumes:
      - application/json
      description: Unblocks a user by userID
      parameters:
      - description: UserID payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user unblocked
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Unblock user
      tags:
      - admin
  /api/admin/update_balance:
    post:
      consumes:
      - application/json
      description: Allows admin to set a new balance for a wallet
      parameters:
      - description: Wallet balance payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AdminUpdateBalanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: balance updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update wallet balance
      tags:
      - admin
  /api/admin/wallets:
    get:
      consumes:
      - application/json
      description: Returns all wallets for a given user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Wallet'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user wallets
      tags:
      - admin
  /api/chats/delete:
    delete:
      description: Allows an admin to delete a chat room by ID
      parameters:
      - description: Chat room ID
        in: query
        name: chat_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Result message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad chat_id
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete chat room
      tags:
      - chats
  /api/disputes/create:
    post:
      consumes:
      - application/json
      description: Opens a new dispute for a task (only client or accepted freelancer
        can open)
      parameters:
      - description: Resolution payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.ResolveDisputeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Dispute created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request or dispute already exists
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create dispute
      tags:
      - disputes
  /api/disputes/details:
    get:
      description: Returns dispute info, related task, escrow balance and messages
      parameters:
      - description: Dispute ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success flag and dispute details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid dispute ID
          schema:
            type: string
        "404":
          description: Dispute, task or escrow not found
          schema:
            type: string
        "500":
          description: Failed to get messages
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get dispute details
      tags:
      - disputes
  /api/disputes/get:
    get:
      description: Returns details and messages for a specific dispute
      parameters:
      - description: Dispute ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dispute details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid dispute ID
          schema:
            type: string
        "404":
          description: Dispute not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get dispute details
      tags:
      - disputes
  /api/disputes/message:
    post:
      consumes:
      - application/json
      description: Allows client, freelancer or assigned admin to send a message in
        a dispute
      parameters:
      - description: Dispute message
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.SendDisputeMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message sent
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON or request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Dispute not found
          schema:
            type: string
        "500":
          description: Failed to send message
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Send dispute message
      tags:
      - disputes
  /api/disputes/my:
    get:
      description: Returns all disputes where the user is a client or accepted freelancer
      produces:
      - application/json
      responses:
        "200":
          description: User disputes list
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user disputes
      tags:
      - disputes
  /api/disputes/resolve:
    post:
      consumes:
      - application/json
      description: Allows an assigned admin to resolve a dispute and release funds
        from escrow
      parameters:
      - description: Resolution payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.ResolveDisputeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success flag and message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON or invalid resolution
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Dispute not assigned to you
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Dispute or task not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to resolve dispute
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Resolve dispute
      tags:
      - disputes
  /api/offers:
    post:
      consumes:
      - application/json
      description: Allows a freelancer to make an offer on an open task
      parameters:
      - description: Offer payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateTaskOfferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success flag and created offer
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON or bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Failed to create offer
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a task offer
      tags:
      - offers
  /api/offers/delete:
    delete:
      description: Allows a freelancer (or admin) to delete their own offer if not
        accepted
      parameters:
      - description: Offer ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Invalid offer ID or accepted offer cannot be deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (not owner or admin)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Offer not found
          schema:
            additionalProperties:
              type: string
            type: object
        "405":
          description: Method not allowed
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete offer
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user's own task offer
      tags:
      - offers
  /api/offers/update:
    put:
      consumes:
      - application/json
      description: Allows a freelancer to update their own offer (not accepted yet)
      parameters:
      - description: Offer data
        in: body
        name: offer
        required: true
        schema:
          $ref: '#/definitions/models.TaskOffer'
      produces:
      - application/json
      responses:
        "200":
          description: success and updated offer
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON or accepted offer cannot be edited
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (not owner)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Offer not found
          schema:
            additionalProperties:
              type: string
            type: object
        "405":
          description: Method not allowed
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update offer
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user's own task offer
      tags:
      - offers
  /api/reviews:
    post:
      consumes:
      - application/json
      description: Allows clients or accepted freelancers to submit a review for a
        completed task. Each user can only review a task once.
      parameters:
      - description: Review data including task ID, rating (1-5), and optional comment
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.Review'
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"success\": true, \"review\": {\"id\": 123, \"task_id\":
            456, \"reviewer_id\": 78, \"reviewed_id\": 90, \"rating\": 5, \"comment\":
            \"Great work!\", \"created_at\": \"2023-12-01T10:00:00Z\"}}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Example: {\"error\": \"Task is not completed\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'Example: {\"error\": \"Unauthorized\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'Example: {\"error\": \"Forbidden\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'Example: {\"error\": \"Task not found\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Example: {\"error\": \"Internal server error\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Submit Task Review
      tags:
      - reviews
  /api/reviews/rating:
    get:
      description: Calculates and returns the average rating received by a user across
        all their completed tasks. Used for reputation scoring.
      parameters:
      - description: ID of the user to get average rating for
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"success\": true, \"rating\": 4.5}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Example: {\"error\": \"Invalid user ID\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Example: {\"error\": \"Database error\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get User Average Rating
      tags:
      - reviews
  /api/reviews/task:
    get:
      description: Retrieves all reviews submitted for a specific task. Used to display
        feedback on task completion pages.
      parameters:
      - description: ID of the task to get reviews for
        in: query
        name: task_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"success\": true, \"reviews\": [{\"id\": 123, \"reviewer_id\":
            78, \"rating\": 5, \"comment\": \"Great job!\", \"created_at\": \"2023-12-01T10:00:00Z\"}]}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Example: {\"error\": \"Invalid task ID\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Example: {\"error\": \"Database error\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Reviews for Task
      tags:
      - reviews
  /api/reviews/user:
    get:
      description: Retrieves all reviews received by a specific user (reviews about
        them). Used to display user reputation and feedback history.
      parameters:
      - description: ID of the user to get reviews for
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"success\": true, \"reviews\": [{\"id\": 123, \"task_id\":
            456, \"reviewer_id\": 78, \"rating\": 5, \"comment\": \"Excellent work!\",
            \"created_at\": \"2023-12-01T10:00:00Z\"}]}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Example: {\"error\": \"Invalid user ID\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Example: {\"error\": \"Database error\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Reviews for User
      tags:
      - reviews
  /api/tasks:
    delete:
      description: Allows the task owner to delete a task
      parameters:
      - description: Task ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success flag
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid task ID
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Failed to delete task
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - tasks
    get:
      description: Returns list of tasks. Use query param `status=open` to get only
        open tasks
      parameters:
      - description: Filter tasks by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success flag and tasks list
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to get tasks
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Allows a user to create a new task
      parameters:
      - description: Task payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success flag and created task
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to create task
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Allows the task owner to update a task
      parameters:
      - description: Updated task payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success flag and updated task
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Failed to update task
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a task
      tags:
      - tasks
  /api/tasks/detail:
    get:
      description: Returns details of a single task
      parameters:
      - description: Task ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success flag and task
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid task ID
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get task details
      tags:
      - tasks
  /api/ticket/createTicket:
    post:
      consumes:
      - application/json
      description: Create new ticket
      parameters:
      - description: Ticket info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.TicketCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TicketCreateAnswer'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Create new ticket
      tags:
      - ticket
  /api/ticket/exit:
    post:
      consumes:
      - application/json
      description: Removes the user from the ticket's participants
      parameters:
      - description: Ticket ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.TicketIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'status: ok'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid payload or ticket_id
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Exit from a ticket
      tags:
      - ticket
  /api/ticket/messages:
    get:
      description: Returns messages for a given ticket if the user has access, supports
        limit/offset
      parameters:
      - description: Ticket ID
        in: query
        name: ticket_id
        required: true
        type: integer
      - description: Number of messages to return (max 1000, default 100)
        in: query
        name: limit
        type: integer
      - description: Offset for messages (default last messages)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            items:
              $ref: '#/definitions/models.TicketMessage'
            type: array
        "400":
          description: Invalid parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: User does not have access
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Get messages for a ticket
      tags:
      - ticket
  /api/ticket/my:
    get:
      description: Get all tickets of user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketDoc'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Get own tickets
      tags:
      - ticket
  /api/ticket/write:
    post:
      consumes:
      - application/json
      description: Add message to ticket
      parameters:
      - description: Message info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.WriteTicketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - bearerAuth: []
      summary: Write to ticket
      tags:
      - ticket
  /api/wallet:
    get:
      description: Returns user’s balances in BTC and XMR
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.WalletBalance'
      security:
      - BearerAuth: []
      summary: Get wallet balances
      tags:
      - wallet
  /api/wallet/bitcoinSend:
    post:
      consumes:
      - application/json
      description: Sends Bitcoin transaction using Electrum
      parameters:
      - description: Destination address
        in: query
        name: to
        required: true
        type: string
      - description: Amount
        in: query
        name: amount
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send Bitcoin
      tags:
      - wallet
  /api/wallet/moneroSend:
    post:
      consumes:
      - application/json
      description: Sends Monero transaction (not implemented)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send Monero
      tags:
      - wallet
  /auth:
    post:
      consumes:
      - application/json
      description: Authenticates user credentials and returns a JWT token for API
        access. Requires CAPTCHA verification for security.
      parameters:
      - description: User login credentials including username, password, and CAPTCHA
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"message\": \"Authenticated successfully\", \"token\":
            \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"}'
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: 'Example: {\"error\": \"invalid captcha\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'Example: {\"error\": \"invalid username or password\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Authentication
      tags:
      - authentication
  /captcha:
    get:
      description: Generates a new CAPTCHA image with 4-digit code for user verification.
        Includes rate limiting per IP to prevent abuse.
      produces:
      - image/png
      responses:
        "200":
          description: image/png" "CAPTCHA image in PNG format
          headers:
            X-Captcha-ID:
              description: Unique identifier for the CAPTCHA challenge
              type: string
        "429":
          description: Rate limit exceeded - too many CAPTCHA requests
          schema:
            additionalProperties:
              type: string
            type: object
        "503":
          description: CAPTCHA is disabled in server configuration
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Generate CAPTCHA Challenge
      tags:
      - authentication
  /captcha/status:
    get:
      description: Returns whether CAPTCHA verification is currently enabled on the
        server. Used by frontend to conditionally show CAPTCHA fields.
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"enabled\": true}'
          schema:
            additionalProperties:
              type: boolean
            type: object
      summary: Get CAPTCHA Configuration Status
      tags:
      - authentication
  /chat/UpdateChatRequest:
    post:
      consumes:
      - application/json
      description: Accept or reject a chat request by the requested user
      parameters:
      - description: ID of the user who sent the chat request
        in: query
        name: requester_id
        required: true
        type: integer
      - description: 'New status: accepted or rejected'
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns status ok
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid requester_id or status
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in or not allowed to update
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Update a chat request
      tags:
      - Chat
  /chat/acceptChatRequest:
    post:
      consumes:
      - application/json
      description: Accepts a chat request from another user and creates a chat room
      parameters:
      - description: ID of the user who sent the request
        in: query
        name: requester_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns accepted status and chatRoomID
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid requester_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Accept chat request
      tags:
      - Chat
  /chat/cancelChatRequest:
    post:
      consumes:
      - application/json
      description: Cancels a previously sent chat request
      parameters:
      - description: ID of the user to whom the request was sent
        in: query
        name: requester_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Request cancelled successfully
          schema:
            type: string
        "400":
          description: Invalid requester_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Cancel chat request
      tags:
      - Chat
  /chat/createChatRequest:
    post:
      consumes:
      - application/json
      description: Create a new chat request from the logged-in user to another user
      parameters:
      - description: ID of the user you want to start a chat with
        in: query
        name: requested_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Returns the created chat request
          schema:
            $ref: '#/definitions/models.ChatRequest'
        "400":
          description: invalid requested_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: db error
          schema:
            type: string
      summary: Create a chat request
      tags:
      - Chat
  /chat/exitFromChat:
    post:
      consumes:
      - application/json
      description: Removes the logged-in user from a chat room
      parameters:
      - description: ID of the chat room
        in: query
        name: chat_room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns status ok
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid chat_room_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Exit chat room
      tags:
      - Chat
  /chat/getChatMessages:
    get:
      consumes:
      - application/json
      description: Returns all messages for a given chat room if the user has access
      parameters:
      - description: ID of the chat room
        in: query
        name: chat_room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            items:
              $ref: '#/definitions/models.ChatMessage'
            type: array
        "400":
          description: Invalid chat_room_id
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in or no access
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Get chat messages
      tags:
      - Chat
  /chat/getChatRequests:
    get:
      consumes:
      - application/json
      description: Returns all incoming chat requests for the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: List of chat requests
          schema:
            items:
              $ref: '#/definitions/models.ChatRequest'
            type: array
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Get chat requests
      tags:
      - Chat
  /chat/getChatRoomsForUser:
    get:
      consumes:
      - application/json
      description: Returns all chat rooms the logged-in user participates in
      produces:
      - application/json
      responses:
        "200":
          description: List of chat rooms
          schema:
            items:
              $ref: '#/definitions/models.ChatRoom'
            type: array
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Get chat rooms
      tags:
      - Chat
  /chat/sendMessage:
    post:
      consumes:
      - application/json
      description: Sends a message to a chat room for the logged-in user
      parameters:
      - description: ID of the chat room
        in: query
        name: chat_room_id
        required: true
        type: integer
      - description: Message object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.ChatMessage'
      produces:
      - application/json
      responses:
        "201":
          description: Returns the created message
          schema:
            $ref: '#/definitions/models.ChatMessage'
        "400":
          description: Invalid chat_room_id or request body
          schema:
            type: string
        "401":
          description: Unauthorized — user not logged in
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Send message
      tags:
      - Chat
  /hello:
    get:
      description: Provides a simple health check response to verify API availability
      produces:
      - application/json
      responses:
        "200":
          description: Returns a greeting message confirming API is operational
          schema:
            $ref: '#/definitions/handlers.Response'
      summary: Health Check Endpoint
      tags:
      - system
  /profile:
    get:
      consumes:
      - application/json
      description: Get current user profile (GET) or update profile (POST)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: invalid payload
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "500":
          description: db error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get or update profile
      tags:
      - profile
    post:
      consumes:
      - application/json
      description: Get current user profile (GET) or update profile (POST)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: invalid payload
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
        "500":
          description: db error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get or update profile
      tags:
      - profile
  /profile/by_id:
    get:
      description: Returns sanitized profile and username by user_id
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "400":
          description: invalid user_id
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
      summary: Get public profile by user_id
      tags:
      - profile
  /profiles:
    get:
      description: Returns paginated list of profiles
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Profile'
            type: array
        "500":
          description: db error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List profiles
      tags:
      - profile
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with username, password, and CAPTCHA
        verification. Generates a recovery mnemonic phrase for account restoration.
      parameters:
      - description: Registration credentials including username, password, and CAPTCHA
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"message\": \"Account created successfully. Save
            your recovery phrase!\", \"encrypted\": \"word1 word2 word3...\"}'
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: 'Example: {\"error\": \"invalid captcha\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Example: {\"error\": \"failed to create user, maybe user exists\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register New User Account
      tags:
      - authentication
  /restoreuser:
    post:
      consumes:
      - application/json
      description: Restores access to a user account using the recovery mnemonic phrase
        and sets a new password. Requires CAPTCHA verification.
      parameters:
      - description: Account restoration data including username, mnemonic, new password,
          and CAPTCHA
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RestoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Account restored successfully with new JWT token
          schema:
            $ref: '#/definitions/handlers.Response'
        "400":
          description: Invalid input, CAPTCHA failure, or invalid mnemonic
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error during account restoration
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Restore User Account
      tags:
      - authentication
  /verify:
    get:
      description: Verifies the user's answer against the stored CAPTCHA challenge.
        Consumes the CAPTCHA token upon successful verification.
      parameters:
      - description: CAPTCHA identifier received from /captcha endpoint
        in: query
        name: id
        required: true
        type: string
      - description: User's answer to the CAPTCHA challenge
        in: query
        name: answer
        required: true
        type: string
      responses:
        "200":
          description: 'ok: true if verification successful'
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: CAPTCHA expired or invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Validate CAPTCHA Response
      tags:
      - authentication
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
